import pandas as pd
import io
from datetime import datetime
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import streamlit as st

def export_data_csv(data):
    """Export data to CSV format"""
    if data.empty:
        return ""
    
    # Create CSV buffer
    csv_buffer = io.StringIO()
    data.to_csv(csv_buffer, index=False)
    csv_content = csv_buffer.getvalue()
    csv_buffer.close()
    
    return csv_content

def export_data_excel(data, sheet_name="Data"):
    """Export data to Excel format"""
    if data.empty:
        return None
    
    # Create Excel buffer
    excel_buffer = io.BytesIO()
    
    with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
        data.to_excel(writer, sheet_name=sheet_name, index=False)
        
        # Auto-adjust column widths
        worksheet = writer.sheets[sheet_name]
        for column in worksheet.columns:
            max_length = 0
            column = [cell for cell in column]
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2) * 1.2
            worksheet.column_dimensions[column[0].column_letter].width = adjusted_width
    
    excel_buffer.seek(0)
    return excel_buffer.getvalue()

def export_dashboard_pdf(data):
    """Export dashboard summary to PDF"""
    if data.empty:
        return None
    
    # Create PDF buffer
    pdf_buffer = io.BytesIO()
    
    # Create document
    doc = SimpleDocTemplate(pdf_buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []
    
    # Title
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        textColor=colors.HexColor('#FF6B35')
    )
    
    story.append(Paragraph("DataLink Analytics Dashboard Report", title_style))
    story.append(Spacer(1, 12))
    
    # Report metadata
    report_info = f"""
    <b>Report Generated:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}<br/>
    <b>Data Period:</b> {data['date'].min()} to {data['date'].max() if 'date' in data.columns else 'N/A'}<br/>
    <b>Total Records:</b> {len(data):,}<br/>
    <b>Generated by:</b> {st.session_state.get('username', 'Unknown User')}
    """
    
    story.append(Paragraph(report_info, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Executive Summary
    story.append(Paragraph("Executive Summary", styles['Heading2']))
    
    # Calculate key metrics
    metrics = {}
    if 'revenue' in data.columns:
        metrics['Total Revenue'] = f"${data['revenue'].sum():,.2f}"
        metrics['Average Revenue'] = f"${data['revenue'].mean():.2f}"
    
    metrics['Total Records'] = f"{len(data):,}"
    
    if 'customer' in data.columns:
        metrics['Unique Customers'] = f"{data['customer'].nunique():,}"
    
    if 'product' in data.columns:
        metrics['Unique Products'] = f"{data['product'].nunique():,}"
    
    # Metrics table
    metrics_data = [['Metric', 'Value']]
    for key, value in metrics.items():
        metrics_data.append([key, value])
    
    metrics_table = Table(metrics_data)
    metrics_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#FF6B35')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))
    
    story.append(metrics_table)
    story.append(Spacer(1, 20))
    
    # Top Performers Section
    if 'product' in data.columns and 'revenue' in data.columns:
        story.append(Paragraph("Top Performing Products", styles['Heading2']))
        
        top_products = data.groupby('product')['revenue'].sum().sort_values(ascending=False).head(5)
        
        products_data = [['Product', 'Revenue']]
        for product, revenue in top_products.items():
            products_data.append([product, f"${revenue:,.2f}"])
        
        products_table = Table(products_data)
        products_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#28A745')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 11),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(products_table)
        story.append(Spacer(1, 20))
    
    # Data Summary Section
    story.append(Paragraph("Data Summary", styles['Heading2']))
    
    # Basic statistics for numeric columns
    numeric_columns = data.select_dtypes(include=['number']).columns
    if len(numeric_columns) > 0:
        summary_stats = data[numeric_columns].describe()
        
        # Create summary table
        summary_data = [['Statistic'] + list(numeric_columns)]
        
        for stat in ['count', 'mean', 'std', 'min', '25%', '50%', '75%', 'max']:
            row = [stat.title()]
            for col in numeric_columns:
                if stat in summary_stats.index:
                    value = summary_stats.loc[stat, col]
                    if stat == 'count':
                        row.append(f"{value:,.0f}")
                    else:
                        row.append(f"{value:.2f}")
                else:
                    row.append("N/A")
            summary_data.append(row)
        
        summary_table = Table(summary_data)
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#17A2B8')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightyellow),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('FONTSIZE', (0, 1), (-1, -1), 8)
        ]))
        
        story.append(summary_table)
        story.append(Spacer(1, 20))
    
    # Sample Data Section
    story.append(Paragraph("Sample Data (First 10 Rows)", styles['Heading2']))
    
    # Get first 10 rows
    sample_data = data.head(10)
    
    # Prepare data for table
    table_data = [list(sample_data.columns)]
    for _, row in sample_data.iterrows():
        table_row = []
        for col in sample_data.columns:
            value = str(row[col])
            # Truncate long values
            if len(value) > 20:
                value = value[:17] + "..."
            table_row.append(value)
        table_data.append(table_row)
    
    sample_table = Table(table_data)
    sample_table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#6C757D')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 9),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.white),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTSIZE', (0, 1), (-1, -1), 7)
    ]))
    
    story.append(sample_table)
    
    # Footer
    story.append(Spacer(1, 30))
    footer_text = """
    <i>This report was generated by DataLink Analytics Platform.<br/>
    For more detailed analysis, please access the full dashboard.</i>
    """
    story.append(Paragraph(footer_text, styles['Italic']))
    
    # Build PDF
    doc.build(story)
    
    pdf_buffer.seek(0)
    return pdf_buffer.getvalue()

def export_insights_report(insights, filename_prefix="insights"):
    """Export insights and analytics to a structured report"""
    report_data = {
        'export_timestamp': datetime.now().isoformat(),
        'insights': insights,
        'generated_by': st.session_state.get('username', 'Unknown'),
        'report_type': 'Analytics Insights'
    }
    
    # Convert to JSON string
    import json
    report_json = json.dumps(report_data, indent=2, default=str)
    
    return report_json

def create_export_summary(data):
    """Create a summary of the exported data"""
    if data.empty:
        return "No data to export"
    
    summary = f"""
    Export Summary
    ==============
    
    Export Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    Total Records: {len(data):,}
    Total Columns: {len(data.columns)}
    
    Column Information:
    """
    
    for col in data.columns:
        col_type = str(data[col].dtype)
        null_count = data[col].isnull().sum()
        summary += f"\n  - {col}: {col_type} ({null_count} nulls)"
    
    if 'date' in data.columns:
        summary += f"\n\nDate Range: {data['date'].min()} to {data['date'].max()}"
    
    if 'revenue' in data.columns:
        summary += f"\nTotal Revenue: ${data['revenue'].sum():,.2f}"
    
    return summary
